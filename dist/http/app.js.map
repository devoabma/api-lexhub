{"version":3,"sources":["../../src/http/app.ts","../../src/http/_env/index.ts","../../src/http/_errors/index.ts","../../src/http/_errors/bad-request-error.ts","../../src/http/_errors/unauthorized-error.ts","../../src/http/middlewares/auth.ts","../../src/lib/prisma.ts","../../src/http/core/agents/active-agent.ts","../../src/http/core/agents/authenticate.ts","../../src/http/core/agents/get-all.ts","../../src/http/core/agents/get-profile.ts","../../src/http/core/agents/inactive-agent.ts","../../src/http/core/agents/logout-agent.ts","../../src/lib/resend.ts","../../src/utils/emails/reset-password-email.tsx","../../src/utils/generate-recovery-code.ts","../../src/http/core/agents/request-password-recover.ts","../../src/http/core/agents/reset-password.ts","../../src/http/core/agents/update-agent.ts","../../src/http/core/services/cancel-service.ts","../../src/lib/axios.ts","../../src/http/core/services/consult-lawyer.ts","../../src/http/core/services/create-service.ts","../../src/http/core/services/create-service-external.ts","../../src/http/core/services/create-type-service.ts","../../src/http/core/services/finished-service.ts","../../src/http/core/services/get-all-quantity-services.ts","../../src/http/core/services/get-all-quantity-services-by-agent.ts","../../src/http/core/services/get-all-quantity-services-in-month.ts","../../src/http/core/services/get-all-quantity-services-in-year.ts","../../src/http/core/services/get-all-services.ts","../../src/http/core/services/get-all-types-services.ts","../../src/http/core/services/get-all-types-services-without-pagination.ts","../../src/http/core/services/update-type-service.ts","../../src/http/core/agents/create-account.ts","../../src/utils/emails/agent-registration-email.tsx","../../src/http/core/services/get-services-by-month-for-chart.ts","../../src/http/routes/index.ts"],"sourcesContent":["import { fastifyCookie } from '@fastify/cookie'\nimport { fastifyCors } from '@fastify/cors'\nimport { fastifyJwt } from '@fastify/jwt'\nimport { fastifyRateLimit } from '@fastify/rate-limit'\nimport { fastifySwagger } from '@fastify/swagger'\nimport { fastifySwaggerUi } from '@fastify/swagger-ui'\nimport { fastify } from 'fastify'\nimport {\n  type ZodTypeProvider,\n  jsonSchemaTransform,\n  serializerCompiler,\n  validatorCompiler,\n} from 'fastify-type-provider-zod'\nimport { env } from './_env'\nimport { errorHandler } from './_errors'\nimport { routes } from './routes'\n\nexport const app = fastify().withTypeProvider<ZodTypeProvider>()\n\napp.setSerializerCompiler(serializerCompiler)\napp.setValidatorCompiler(validatorCompiler)\n\n// Configura o swagger para documenta√ß√£o da API\napp.register(fastifySwagger, {\n  openapi: {\n    info: {\n      title: 'API LexHub',\n      description:\n        'üìö API LexHub (OAB Atende) | Sistema de Gest√£o de Atendimentos da OAB Maranh√£o',\n      version: '1.0.0',\n    },\n    components: {\n      securitySchemes: {\n        // bearerAuth nome definido para o securitySchemes no swagger\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT',\n        },\n      },\n    },\n    servers: [],\n  },\n  transform: jsonSchemaTransform,\n})\n\napp.register(fastifySwaggerUi, {\n  routePrefix: '/docs', // rota para acessar a documenta√ß√£o\n})\n\napp.register(fastifyJwt, {\n  secret: env.JWT_SECRET,\n  cookie: {\n    cookieName: '@lexhub-auth',\n    signed: false,\n  },\n})\n\napp.register(fastifyCors, {\n  origin: env.WEB_URL,\n  credentials: true,\n  methods: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n})\n\napp.register(fastifyCookie)\n\napp.register(fastifyRateLimit, {\n  max: 100, // M√°ximo de 100 requisi√ß√µes\n  timeWindow: '1 minute', // Por minuto\n  cache: 10000, // Cache de requisi√ß√µes para melhor desempenho\n})\n\napp.register(routes)\n\n// Configura o tratamento de erros globais da API\napp.setErrorHandler(errorHandler)\n","import 'dotenv/config'\nimport { z } from 'zod'\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.coerce.number().default(3892),\n  DATABASE_URL: z.string().url(),\n  PASSWORD_ADMIN_FULL: z.string().min(8),\n  EMAIL_ADMIN_FULL: z.string().email(),\n  JWT_SECRET: z.string().min(8),\n  RESEND_API_KEY: z.string(),\n  WEB_URL: z.string().url(),\n  API_PROTHEUS_DATA_URL: z.string().url(),\n  API_PROTHEUS_FIN_URL: z.string().url(),\n})\n\nconst _env = envSchema.safeParse(process.env)\n\nif (_env.success === false) {\n  console.error(\n    '> ‚ùå Vari√°veis de ambiente inv√°lidas, verifique o arquivo .env',\n    _env.error.format()\n  )\n\n  throw new Error('‚ùå Houve um erro ao carregar as vari√°veis de ambiente.')\n}\n\nexport const env = _env.data\n","import { AxiosError } from 'axios'\nimport type { FastifyInstance } from 'fastify'\nimport { ZodError } from 'zod'\nimport { BadRequestError } from './bad-request-error'\nimport { UnauthorizedError } from './unauthorized-error'\n\ntype FastifyErrorHandler = FastifyInstance['errorHandler']\n\nexport const errorHandler: FastifyErrorHandler = (error, request, reply) => {\n  if (error.validation) {\n    return reply.status(400).send({\n      message: ' Houve um erro na valida√ß√£o, verifique os dados enviados.',\n    })\n  }\n\n  if (error instanceof ZodError) {\n    return reply.status(400).send({\n      message: 'Houve um erro na valida√ß√£o, verifique os dados enviados.',\n      errors: error.flatten().fieldErrors,\n    })\n  }\n\n  if (error instanceof BadRequestError) {\n    return reply.status(400).send({\n      message: error.message,\n    })\n  }\n\n  if (error instanceof UnauthorizedError) {\n    return reply.status(401).send({\n      message: error.message,\n    })\n  }\n\n  // TODO: Adicionar funcionalidade do RateLimit.\n  if (error.statusCode === 429) {\n    return reply.status(429).send({\n      message: 'Limite de requisi√ß√µes excedido. Tente novamente mais tarde.',\n    })\n  }\n\n  // Erro global disparado se n√£o houver advogado\n  if (error instanceof AxiosError) {\n    return reply.status(404).send({\n      message:\n        'Consulta indispon√≠vel ou advogado(a) n√£o encontrado. Verifique os dados e tente novamente mais tarde.',\n    })\n  }\n\n  console.error(error)\n  // Enviar erro para alguma plataforma de observabilidade\n  return reply.status(500).send({\n    message: 'Erro interno do servidor. Tente novamente mais tarde.',\n  })\n}\n","export class BadRequestError extends Error {}\n","export class UnauthorizedError extends Error {\n  constructor(message?: string) {\n    super(message ?? ' Acesso n√£o autorizado, tente novamente.')\n  }\n}\n","import type { FastifyInstance } from 'fastify'\nimport { fastifyPlugin } from 'fastify-plugin'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\n\nexport const auth = fastifyPlugin(async (app: FastifyInstance) => {\n  app.addHook('preHandler', async request => {\n    request.getCurrentAgentId = async () => {\n      try {\n        // Verifica se o token √© valido e retorna o sub\n        const { sub } = await request.jwtVerify<{ sub: string }>()\n\n        return sub\n      } catch {\n        throw new UnauthorizedError(\n          'Token inv√°lido ou expirado. Fa√ßa login novamente.'\n        )\n      }\n    }\n\n    request.checkIfAgentIsAdmin = async () => {\n      // Verifica o token primeiro\n      const { sub } = await request.jwtVerify<{ sub: string }>().catch(() => {\n        throw new UnauthorizedError(\n          'Token inv√°lido ou expirado. Verifique as informa√ß√µes e tente novamente.'\n        )\n      })\n\n      // Busca o agente no banco de dados\n      const agent = await prisma.agent.findUnique({\n        where: { id: sub },\n        select: { role: true },\n      })\n\n      if (!agent) {\n        throw new UnauthorizedError(\n          'Funcion√°rio n√£o encontrado. Verifique os dados e tente novamente.'\n        )\n      }\n\n      if (agent.role === 'MEMBER') {\n        throw new UnauthorizedError(\n          'Permiss√£o negada. Voc√™ precisa ser um administrador para realizar esta a√ß√£o.'\n        )\n      }\n    }\n  })\n})\n","import { PrismaClient } from '@prisma/client'\nimport { env } from 'http/_env'\n\nexport const prisma = new PrismaClient({\n  // Gera logs de queries apenas em ambiente de desenvolvimento\n  log: env.NODE_ENV === 'DEVELOPMENT' ? ['query'] : [],\n})\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function activeAgent(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .patch(\n      '/agents/active/:id',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Ativa√ß√£o de um funcion√°rio',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().uuid(),\n          }),\n          response: {\n            204: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente administradores podem ativar funcion√°rios\n        await request.checkIfAgentIsAdmin()\n\n        const { id } = request.params\n\n        const agent = await prisma.agent.findUnique({\n          where: { id },\n        })\n\n        if (!agent) {\n          throw new UnauthorizedError(\n            'O funcion√°rio n√£o foi encontrado. Verifique os dados informados e tente novamente.'\n          )\n        }\n\n        try {\n          await prisma.agent.update({\n            where: {\n              id,\n            },\n            data: {\n              inactive: null,\n              updatedAt: new Date(),\n            },\n          })\n\n          return reply.status(204).send()\n        } catch (err) {\n          throw new UnauthorizedError(\n            'N√£o foi poss√≠vel inativar o funcion√°rio. Tente novamente mais tarde.'\n          )\n        }\n      }\n    )\n}\n","import { compare } from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\nimport { z } from 'zod'\n\nexport async function authenticate(app: FastifyInstance) {\n  app.withTypeProvider<ZodTypeProvider>().post(\n    '/agents/sessions',\n    {\n      schema: {\n        tags: ['agents'],\n        summary: 'Autentica√ß√£o de um funcion√°rio',\n        body: z.object({\n          email: z.string().email(),\n          password: z.string().min(8),\n        }),\n        response: {\n          201: z.object({\n            token: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { email, password } = request.body\n\n      const userFromEmail = await prisma.agent.findUnique({\n        where: {\n          email,\n        },\n      })\n\n      // Verifica se o usu√°rio foi desativado pelo administrador\n      if (userFromEmail && userFromEmail.inactive !== null) {\n        throw new BadRequestError(\n          'O funcion√°rio est√° inativo. Procure com o administrador do sistema.'\n        )\n      }\n\n      if (!userFromEmail) {\n        throw new BadRequestError(\n          'Credenciais inv√°lidas. Verifique suas informa√ß√µes e tente novamente.'\n        )\n      }\n\n      const isPasswordValid = await compare(\n        password,\n        userFromEmail.passwordHash\n      )\n\n      if (!isPasswordValid) {\n        throw new BadRequestError(\n          'Credenciais inv√°lidas. Verifique suas informa√ß√µes e tente novamente.'\n        )\n      }\n\n      // Cria√ß√£o do token de autentica√ß√£o\n      const token = await reply.jwtSign(\n        {\n          // Envia o id do usu√°rio para o token\n          sub: userFromEmail.id,\n          role: userFromEmail.role,\n        },\n        {\n          sign: {\n            expiresIn: '1d',\n          },\n        }\n      )\n\n      return reply\n        .setCookie('@lexhub-auth', token, {\n          path: '/',\n          httpOnly: true,\n          sameSite: true,\n          maxAge: 60 * 60 * 24,\n        })\n        .status(201)\n        .send({\n          token,\n        })\n    }\n  )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAll(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/agents/all',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Busca todos os funcion√°rios cadastrados',\n          security: [{ bearerAuth: [] }],\n          querystring: z.object({\n            pageIndex: z.coerce.number().default(1),\n            name: z.string().optional(),\n            role: z.enum(['ADMIN', 'MEMBER']).optional(),\n          }),\n          response: {\n            200: z.object({\n              agents: z.array(\n                z.object({\n                  id: z.string().uuid(),\n                  name: z.string(),\n                  email: z.string().email(),\n                  role: z.enum(['ADMIN', 'MEMBER']),\n                  inactive: z.date().nullable(),\n                })\n              ),\n              total: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente administradores podem listar todos os funcion√°rios\n        await request.checkIfAgentIsAdmin()\n\n        const { pageIndex, name, role } = request.query\n\n        try {\n          const [agents, total] = await Promise.all([\n            prisma.agent.findMany({\n              where: {\n                name: name\n                  ? { contains: name, mode: 'insensitive' }\n                  : undefined,\n                role: role ? role : undefined,\n              },\n              select: {\n                id: true,\n                name: true,\n                email: true,\n                role: true,\n                inactive: true,\n              },\n              orderBy: {\n                createdAt: 'desc',\n              },\n              skip: (pageIndex - 1) * 10,\n              take: 10,\n            }),\n            prisma.agent.count({\n              where: {\n                name: name\n                  ? { contains: name, mode: 'insensitive' }\n                  : undefined,\n                role: role ? role : undefined,\n              },\n            }),\n          ])\n\n          if (!agents) {\n            throw new BadRequestError(\n              'Nenhum funcion√°rio cadastrado. Cadastre um para continuar.'\n            )\n          }\n\n          return reply.status(200).send({\n            agents,\n            total,\n          })\n        } catch (err) {\n          throw new BadRequestError(\n            'N√£o foi poss√≠vel recuperar os atendimentos. Tente novamente mais tarde.'\n          )\n        }\n\n        // const agents = await prisma.agent.findMany({\n        //   select: {\n        //     id: true,\n        //     name: true,\n        //     email: true,\n        //     role: true,\n        //     inactive: true,\n        //   },\n        //   orderBy: [\n        //     {\n        //       createdAt: 'desc', // Mostra os funcion√°rios mais recentes primeiro\n        //     },\n        //   ],\n        // })\n\n        // if (!agents) {\n        //   throw new BadRequestError(\n        //     ' Ainda n√£o h√° funcion√°rios cadastrados no sistema. Por favor, cadastre um funcion√°rio antes de prosseguir.'\n        //   )\n        // }\n\n        // return reply.status(200).send({\n        //   agents,\n        //   total: agents.length,\n        // })\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getProfile(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/agents/profile',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Busca o perfil de um funcion√°rio logado',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.object({\n              agent: z.object({\n                id: z.string().uuid(),\n                name: z.string(),\n                email: z.string().email(),\n                role: z.enum(['ADMIN', 'MEMBER']),\n              }),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        const agentId = await request.getCurrentAgentId()\n\n        // Retorna o usu√°rio somente com os dados necess√°rios\n        const agent = await prisma.agent.findUnique({\n          where: {\n            id: agentId,\n          },\n          select: {\n            id: true,\n            name: true,\n            email: true,\n            role: true,\n          },\n        })\n\n        if (!agent) {\n          throw new BadRequestError(\n            'Funcion√°rio n√£o encontrado. Verifique os dados e tente novamente.'\n          )\n        }\n\n        return reply.status(200).send({ agent })\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function inactiveAgent(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .patch(\n      '/agents/inactive/:id',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Inactiva√ß√£o de um funcion√°rio',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().uuid(),\n          }),\n          response: {\n            204: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente administradores podem inativar funcion√°rios\n        await request.checkIfAgentIsAdmin()\n\n        const { id } = request.params\n\n        const agent = await prisma.agent.findUnique({\n          where: { id },\n        })\n\n        if (!agent) {\n          throw new UnauthorizedError(\n            'O funcion√°rio n√£o foi encontrado. Verifique os dados informados e tente novamente.'\n          )\n        }\n\n        try {\n          await prisma.agent.update({\n            where: {\n              id,\n            },\n            data: {\n              inactive: new Date(),\n              updatedAt: new Date(),\n            },\n          })\n\n          return reply.status(204).send()\n        } catch (err) {\n          throw new UnauthorizedError(\n            'N√£o foi poss√≠vel inativar o funcion√°rio. Tente novamente mais tarde.'\n          )\n        }\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function logoutAgent(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .post(\n      '/agents/logout',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Desloga o funcion√°rio logado',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        const agentId = await request.getCurrentAgentId()\n\n        // Retorna o usu√°rio somente com os dados necess√°rios\n        const agent = await prisma.agent.findUnique({\n          where: {\n            id: agentId,\n          },\n        })\n\n        if (!agent) {\n          throw new BadRequestError(\n            ' O funcion√°rio solicitado n√£o foi localizado em nossa base de dados. Por favor, verifique os dados informados e tente novamente.'\n          )\n        }\n\n        return reply\n          .clearCookie('@lexhub-auth', {\n            path: '/',\n          })\n          .status(200)\n          .send()\n      }\n    )\n}\n","import { env } from 'http/_env'\nimport { Resend } from 'resend'\n\nexport const resend = new Resend(env.RESEND_API_KEY)\n","import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Heading,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Tailwind,\n  Text,\n} from '@react-email/components'\nimport * as React from 'react'\n\ninterface PasswordResetEmailProps {\n  name: string\n  code: string\n  link: string\n}\n\n// @ts-ignore somente para o react-email\nReact.version\n\nexport const ResetPasswordEmail = ({\n  name,\n  code,\n  link,\n}: PasswordResetEmailProps) => {\n  const currentYear = new Date().getFullYear()\n  const sendDate = new Date().toLocaleDateString('pt-BR')\n\n  return (\n    <Html>\n      <Head />\n      <Preview>\n        Recebemos uma solicita√ß√£o para redefinir a senha da sua conta no OAB\n        Atende.\n      </Preview>\n\n      <Tailwind>\n        <Body className=\"bg-gray-100 font-sans\">\n          <Container className=\"bg-white border border-gray-200 rounded-lg p-8 mx-auto my-8 max-w-xl\">\n            <Heading className=\"text-2xl font-bold text-center text-blue-700 mb-6\">\n              Redefini√ß√£o de Senha - OAB Atende\n            </Heading>\n            <Text className=\"text-gray-700 mb-6\">\n              Ol√°, <b>{name}</b>\n            </Text>\n            <Text className=\"text-gray-700 mb-6\">\n              Recebemos uma solicita√ß√£o para redefinir a senha da sua conta no\n              OAB Atende. Use o c√≥digo abaixo para concluir o processo de\n              redefini√ß√£o:\n            </Text>\n            <Section className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n              <Text className=\"text-2xl font-bold text-center text-blue-700\">\n                {code}\n              </Text>\n            </Section>\n            <Text className=\"text-gray-700 mb-6\">\n              Agora, clique no bot√£o abaixo para ser redirecionado √† p√°gina de\n              redefini√ß√£o de senha:\n            </Text>\n            <Button\n              href={link}\n              className=\"bg-blue-600 text-white font-bold py-3 px-6 rounded-lg text-center block\"\n            >\n              Redefinir Senha\n            </Button>\n            <Hr className=\"border-gray-200 my-6\" />\n            <Text className=\"text-sm text-gray-500 text-center\">\n              Se voc√™ n√£o solicitou a redefini√ß√£o de senha, por favor ignore\n              este e-mail ou entre em contato com nosso suporte.\n            </Text>\n            <Hr className=\"border-gray-200 my-6\" />\n            <Text className=\"text-xs text-gray-400 text-center\">\n              &copy; {currentYear} OAB Atende. Todos os direitos reservados.\n            </Text>\n            <Text className=\"text-xs text-gray-400 text-center\">\n              Este e-mail foi enviado em {sendDate}.\n            </Text>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  )\n}\n","export function generateRecoveryCode(length = 6): string {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let code = ''\n\n  // Gera o c√≥digo aleat√≥rio com base na quantidade desejada\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * characters.length)\n    code += characters[randomIndex]\n  }\n\n  return code\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { env } from 'http/_env'\nimport { prisma } from 'lib/prisma'\nimport { resend } from 'lib/resend'\nimport { ResetPasswordEmail } from 'utils/emails/reset-password-email'\nimport { generateRecoveryCode } from 'utils/generate-recovery-code'\nimport { z } from 'zod'\n\nexport async function requestPasswordRecover(app: FastifyInstance) {\n  app.withTypeProvider<ZodTypeProvider>().post(\n    '/agents/password/recover',\n    {\n      schema: {\n        tags: ['agents'],\n        summary: 'Requisi√ß√£o de redefini√ß√£o de senha',\n        security: [{ bearerAuth: [] }],\n        body: z.object({\n          email: z.string().email(),\n        }),\n        response: {\n          200: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { email } = request.body\n\n      const agentFromEmail = await prisma.agent.findUnique({\n        where: {\n          email,\n        },\n      })\n\n      if (!agentFromEmail) {\n        // N√£o queremos que as pessoas saibam se o usu√°rio realmente existe\n        return reply.status(200).send()\n      }\n\n      const { code } = await prisma.token.create({\n        data: {\n          type: 'PASSWORD_RECOVER',\n          agentId: agentFromEmail.id,\n          code: generateRecoveryCode(),\n        },\n      })\n\n      await resend.emails.send({\n        from: 'üìß OAB Atende <oabatende@oabma.com.br>',\n        // FIXME: Em ambiente de desenvolvimento envia para o email do desenvolvedor\n        to: env.NODE_ENV === 'PRODUCTION' ? email : 'hilquiasfmelo@hotmail.com',\n        subject: 'üîÑ Redefini√ß√£o de Senha - OAB Atende',\n        react: ResetPasswordEmail({\n          name: agentFromEmail.name,\n          code,\n          link: `${env.WEB_URL}/reset-password?code=${code}`,\n        }),\n      })\n\n      // Excluir o token ap√≥s 2 minutos (120000ms)\n      setTimeout(async () => {\n        await prisma.token.delete({\n          where: { code },\n        })\n      }, 120000)\n\n      // Somente em ambiente de desenvolvimento mostra no console\n      if (env.NODE_ENV === 'DEVELOPMENT') {\n        console.log(\n          '> ‚úÖ Email de redefini√ß√£o de senha enviado com sucesso.',\n          code\n        )\n      }\n\n      return reply.status(200).send()\n    }\n  )\n}\n","import { compare, hash } from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\nimport { z } from 'zod'\n\nexport async function resetPassword(app: FastifyInstance) {\n  app.withTypeProvider<ZodTypeProvider>().post(\n    '/agents/password/reset',\n    {\n      schema: {\n        tags: ['agents'],\n        summary: 'Reset de senha de um funcion√°rio',\n        body: z.object({\n          code: z.string(),\n          password: z.string().min(8),\n        }),\n        response: {\n          204: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { code, password } = request.body\n\n      // Verifica se o c√≥digo de redefini√ß√£o de senha √© v√°lido\n      const tokenFromCode = await prisma.token.findUnique({\n        where: {\n          code,\n        },\n      })\n\n      if (!tokenFromCode || tokenFromCode.code !== code) {\n        throw new UnauthorizedError(\n          'C√≥digo de redefini√ß√£o de senha inv√°lido. Verifique e tente novamente.'\n        )\n      }\n\n      // Busca o funcion√°rio associado ao token\n      const agent = await prisma.agent.findUnique({\n        where: {\n          id: tokenFromCode.agentId,\n        },\n      })\n\n      if (!agent) {\n        throw new UnauthorizedError(\n          'Nenhum funcion√°rio encontrado. Verifique as informa√ß√µes e tente novamente.'\n        )\n      }\n\n      // Verifica se a nova senha √© igual √† senha atual\n      const isSamePassword = await compare(password, agent.passwordHash)\n\n      if (isSamePassword) {\n        throw new UnauthorizedError(\n          'A nova senha deve ser diferente da atual. Escolha outra senha e tente novamente.'\n        )\n      }\n\n      const passwordHash = await hash(password, 8)\n\n      // Atualiza a senha do agente com o novo hash de senha\n      await prisma.agent.update({\n        where: {\n          id: tokenFromCode.agentId,\n        },\n        data: {\n          passwordHash,\n        },\n      })\n\n      return reply.status(204).send()\n    }\n  )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function updateAgent(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .put(\n      '/agents/update/:id',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Atualiza√ß√£o de um funcion√°rio',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().uuid(),\n          }),\n          body: z.object({\n            name: z.string().optional(),\n            email: z.string().email().optional(),\n            role: z.enum(['ADMIN', 'MEMBER']).optional(),\n          }),\n          response: {\n            204: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente administradores podem listar todos os funcion√°rios\n        await request.checkIfAgentIsAdmin()\n\n        const { id } = request.params\n        const { name, email, role } = request.body\n\n        const agent = await prisma.agent.findUnique({\n          where: { id },\n        })\n\n        if (!agent) {\n          throw new UnauthorizedError(\n            'Funcion√°rio n√£o encontrado. Verifique os dados e tente novamente.'\n          )\n        }\n\n        // Verifica se o e-mail que est√° tentando alterar j√° existe\n        if (email && email !== agent.email) {\n          // Busca se o e-mail j√° existe no banco\n          const emailExists = await prisma.agent.findUnique({\n            where: { email },\n          })\n\n          if (emailExists) {\n            throw new UnauthorizedError(\n              'E-mail j√° cadastrado. Verifique as informa√ß√µes e tente novamente.'\n            )\n          }\n        }\n\n        try {\n          await prisma.agent.update({\n            where: {\n              id,\n            },\n            data: {\n              name,\n              email,\n              role,\n              updatedAt: new Date(),\n            },\n          })\n\n          return reply.status(204).send()\n        } catch (err) {\n          throw new UnauthorizedError(\n            'Falha na atualiza√ß√£o. Verifique os dados e tente novamente.'\n          )\n        }\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function cancelService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .delete(\n      '/services/cancel/:id',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Cancelar um atendimento enquanto em aberto',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().uuid(),\n          }),\n          response: {\n            204: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const { id } = request.params\n\n        const service = await prisma.services.findUnique({\n          where: { id },\n        })\n\n        if (!service) {\n          throw new UnauthorizedError(\n            'O servi√ßo solicitado n√£o foi localizado em nossa base de dados. Por favor, verifique as informa√ß√µes e tente novamente.'\n          )\n        }\n\n        if (service.status !== 'OPEN') {\n          throw new UnauthorizedError(\n            'O servi√ßo solicitado j√° foi finalizado. Por favor, verifique as informa√ß√µes e tente novamente.'\n          )\n        }\n\n        try {\n          await prisma.services.delete({\n            where: { id },\n          })\n\n          return reply.status(204).send()\n        } catch (err) {\n          throw new UnauthorizedError(\n            'Ocorreu um erro para cancelar o atendimento. Por favor, verifique os dados informados e tente novamente.'\n          )\n        }\n      }\n    )\n}\n","import axios from 'axios'\nimport { env } from 'http/_env'\n\nexport const API_PROTHEUS_FIN_URL = axios.create({\n  baseURL: env.API_PROTHEUS_FIN_URL,\n})\n\nexport const API_PROTHEUS_DATA_URL = axios.create({\n  baseURL: env.API_PROTHEUS_DATA_URL,\n})\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { API_PROTHEUS_DATA_URL, API_PROTHEUS_FIN_URL } from 'lib/axios'\nimport { z } from 'zod'\n\ninterface LawyersProps {\n  lawyer: {\n    nome: string\n  }\n}\n\nexport async function consultLawyer(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .post(\n      '/services/consult/lawyer',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Consulta inadimpl√™ncia do advogado',\n          security: [{ bearerAuth: [] }],\n          body: z.object({\n            oab: z.string(),\n          }),\n          response: {\n            200: z.object({\n              name: z.string(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const { oab } = request.body\n\n        // Busca na API do Protheus se o advogado est√° adimplente\n        const { data } = await API_PROTHEUS_FIN_URL(`/${oab}`)\n\n        const {\n          data: { lawyer },\n        } = await API_PROTHEUS_DATA_URL<LawyersProps>('/', {\n          params: {\n            idOrg: 10,\n            param: oab,\n          },\n        })\n\n        if (!data) {\n          const name = lawyer?.nome\n\n          throw new UnauthorizedError(\n            `Prezado(a) ${name}, n√£o podemos prosseguir com o atendimento. Para mais informa√ß√µes, entre em contato com o Setor Financeiro.`\n          )\n        }\n\n        return reply.status(200).send({\n          name: lawyer?.nome,\n        })\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { API_PROTHEUS_DATA_URL } from 'lib/axios'\nimport { prisma } from 'lib/prisma'\nimport { z } from 'zod'\n\ninterface LawyersProps {\n  lawyer: {\n    nome: string\n    registro: string\n    email: string\n  }\n}\n\nexport async function createService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .post(\n      '/services',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Cria√ß√£o de um novo atendimento',\n          security: [{ bearerAuth: [] }],\n          body: z.object({\n            oab: z.string(),\n            serviceTypeId: z.array(z.string().cuid()),\n            observation: z.string().optional(),\n            assistance: z.enum(['PERSONALLY', 'REMOTE']),\n            status: z.enum(['OPEN', 'COMPLETED']).default('OPEN'),\n          }),\n          response: {\n            201: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        const agentId = await request.getCurrentAgentId()\n\n        const { oab, serviceTypeId, observation, assistance } = request.body\n\n        // Verifica se o advogado j√° est√° cadastrado no banco de dados\n        let lawyer = await prisma.lawyer.findUnique({\n          where: {\n            oab,\n          },\n        })\n\n        // Cria o advogado no banco de dados se ele ainda n√£o estiver cadastrado\n        if (!lawyer) {\n          const {\n            data: { lawyer: lawyerData },\n          } = await API_PROTHEUS_DATA_URL<LawyersProps>('/', {\n            params: {\n              idOrg: 10,\n              param: oab,\n            },\n          })\n\n          lawyer = await prisma.lawyer.create({\n            data: {\n              name: lawyerData.nome,\n              oab: lawyerData.registro,\n              email: lawyerData.email,\n            },\n          })\n        }\n\n        // Verifica se todos os tipos de servi√ßo existem\n        const serviceTypes = await Promise.all(\n          serviceTypeId.map(async serviceType => {\n            const type = await prisma.serviceTypes.findUnique({\n              where: {\n                id: serviceType,\n              },\n            })\n\n            if (!type) {\n              throw new UnauthorizedError(\n                'Tipo de servi√ßo n√£o encontrado. Verifique as informa√ß√µes e tente novamente.'\n              )\n            }\n\n            return type\n          })\n        )\n\n        // Cria o atendimento (Service)\n        const service = await prisma.services.create({\n          data: {\n            assistance,\n            observation,\n            agentId,\n            lawyerId: lawyer.id,\n          },\n        })\n\n        // Associa o Service aos ServiceTypes na tabela ServiceServiceTypes\n        await Promise.all(\n          serviceTypes.map(async serviceType => {\n            await prisma.serviceServiceTypes.create({\n              data: {\n                serviceId: service.id,\n                serviceTypeId: serviceType.id,\n              },\n            })\n          })\n        )\n\n        return reply.status(201).send()\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function createServiceExternal(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .post(\n      '/services/external',\n      {\n        schema: {\n          tags: ['servicesExternal'],\n          summary: 'Cria√ß√£o de um novo servi√ßo externo',\n          security: [{ bearerAuth: [] }],\n          body: z.object({\n            oab: z.string(),\n            name: z.string(),\n            email: z.string().email(),\n            serviceTypeId: z.array(z.string().cuid()),\n            observation: z.string().optional(),\n            assistance: z.enum(['PERSONALLY', 'REMOTE']),\n            status: z.enum(['OPEN', 'COMPLETED']).default('OPEN'),\n          }),\n          response: {\n            201: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        const agentId = await request.getCurrentAgentId()\n\n        const { oab, name, email, serviceTypeId, observation, assistance } =\n          request.body\n\n        // Verifica se o advogado j√° est√° cadastrado no banco de dados\n        let lawyer = await prisma.lawyer.findUnique({\n          where: {\n            oab,\n          },\n        })\n\n        if (!lawyer) {\n          lawyer = await prisma.lawyer.create({\n            data: {\n              oab,\n              name,\n              email,\n            },\n          })\n        }\n\n        const serviceTypes = await Promise.all(\n          serviceTypeId.map(async serviceType => {\n            const type = await prisma.serviceTypes.findUnique({\n              where: {\n                id: serviceType,\n              },\n            })\n\n            if (!type) {\n              throw new UnauthorizedError(\n                'Tipo de servi√ßo n√£o encontrado. Verifique os dados e tente novamente.'\n              )\n            }\n\n            return type\n          })\n        )\n\n        // Cria o atendimento (Service)\n        const service = await prisma.services.create({\n          data: {\n            assistance,\n            observation,\n            agentId,\n            lawyerId: lawyer.id,\n          },\n        })\n\n        // Associa o Service aos ServiceTypes na tabela ServiceServiceTypes\n        await Promise.all(\n          serviceTypes.map(async serviceType => {\n            await prisma.serviceServiceTypes.create({\n              data: {\n                serviceId: service.id,\n                serviceTypeId: serviceType.id,\n              },\n            })\n          })\n        )\n\n        return reply.status(201).send()\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport { z } from 'zod'\n\nexport async function createTypeService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .post(\n      '/services/types',\n      {\n        schema: {\n          tags: ['servicesTypes'],\n          summary: 'Cria√ß√£o de um novo tipo de servi√ßo',\n          security: [{ bearerAuth: [] }],\n          body: z.object({\n            name: z.string(),\n          }),\n          response: {\n            201: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente admins podem criar um novo funcion√°rio\n        await request.checkIfAgentIsAdmin()\n\n        const { name } = request.body\n\n        const serviceType = await prisma.serviceTypes.findUnique({\n          where: {\n            name,\n          },\n        })\n\n        if (serviceType) {\n          throw new BadRequestError(\n            'Tipo de servi√ßo j√° cadastrado. Insira um nome √∫nico.'\n          )\n        }\n\n        await prisma.serviceTypes.create({\n          data: {\n            name,\n          },\n        })\n\n        return reply.status(201).send()\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function finishedService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .patch(\n      '/services/finished/:id',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Finalizar um atendimento',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().uuid(),\n          }),\n          response: {\n            204: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const { id } = request.params\n\n        const service = await prisma.services.findUnique({\n          where: { id },\n        })\n\n        if (!service) {\n          throw new UnauthorizedError(\n            'O atendimento n√£o foi encontrado. Verifique os dados e tente novamente.'\n          )\n        }\n\n        if (service.status === 'COMPLETED') {\n          throw new UnauthorizedError(\n            'O atendimento j√° foi finalizado. Verifique os dados e tente novamente.'\n          )\n        }\n\n        try {\n          await prisma.services.update({\n            where: {\n              id,\n            },\n            data: {\n              finishedAt: new Date(),\n              status: 'COMPLETED',\n            },\n          })\n\n          return reply.status(204).send()\n        } catch (err) {\n          throw new UnauthorizedError(\n            ' Ocorreu um erro ao finalizar o atendimento. Por favor, tente novamente mais tarde.'\n          )\n        }\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllQuantityServices(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/general',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca todos os atendimentos cadastrados geral',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.object({\n              total: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const services = await prisma.services.count()\n\n        return reply.status(200).send({ total: services })\n      }\n    )\n}\n","import dayjs from 'dayjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport { z } from 'zod'\n\nexport async function getAllQuantityServicesByAgent(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/general/agent/:id',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca todos os atendimentos cadastrados de um funcion√°rio',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().uuid(),\n          }),\n          response: {\n            200: z.object({\n              totalGeneral: z.number(),\n              totalOnMonth: z.number(),\n              totalOnPreviousMonth: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const { id } = request.params\n\n        // Obt√©m o total geral de atendimentos do funcion√°rio\n        const servicesByAgent = await prisma.services.count({\n          where: {\n            agentId: id,\n          },\n        })\n\n        // Obt√©m a data atual\n        const now = dayjs()\n\n        // Obt√©m o primeiro dia do m√™s atual\n        const startOfMonth = now.startOf('month').toDate()\n\n        // Obt√©m o √∫ltimo dia do m√™s atual\n        const endOfMonth = now.endOf('month').toDate()\n\n        // Obt√©m o total de atendimentos no m√™s do funcion√°rio\n        const servicesInMonth = await prisma.services.count({\n          where: {\n            agentId: id,\n            createdAt: {\n              gte: startOfMonth,\n              lte: endOfMonth,\n            },\n          },\n        })\n\n        const startOfPreviousMonth = now\n          .subtract(1, 'month')\n          .startOf('month')\n          .toDate()\n        const endOfPreviousMonth = now\n          .subtract(1, 'month')\n          .endOf('month')\n          .toDate()\n\n        // Obt√©m o total de atendimentos no m√™s anterior do funcion√°rio\n        const servicesInPreviousMonth = await prisma.services.count({\n          where: {\n            agentId: id,\n            createdAt: {\n              gte: startOfPreviousMonth,\n              lte: endOfPreviousMonth,\n            },\n          },\n        })\n\n        return reply.status(200).send({\n          totalGeneral: servicesByAgent,\n          totalOnMonth: servicesInMonth,\n          totalOnPreviousMonth: servicesInPreviousMonth,\n        })\n      }\n    )\n}\n","import dayjs from 'dayjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllQuantityServicesInMonth(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/general/month',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca todos os atendimentos cadastrados no m√™s atual',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.object({\n              totalCurrentMonth: z.number(),\n              totalPreviousMonth: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        // Obt√©m a data atual\n        const now = dayjs()\n\n        // Obt√©m o primeiro dia do m√™s atual\n        const startOfMonth = now.startOf('month').toDate()\n\n        // Obt√©m o √∫ltimo dia do m√™s atual\n        const endOfMonth = now.endOf('month').toDate()\n\n        // Conta os atendimentos que foram criados no m√™s atual\n        const servicesInMonth = await prisma.services.count({\n          where: {\n            createdAt: {\n              gte: startOfMonth, // maior ou igual ao primeiro dia do m√™s\n              lte: endOfMonth, // menor ou igual ao √∫ltimo dia do m√™s\n            },\n          },\n        })\n\n        // L√≥gica para o m√™s anterior\n        const startOfPreviousMonth = now\n          .subtract(1, 'month')\n          .startOf('month')\n          .toDate()\n        const endOfPreviousMonth = now\n          .subtract(1, 'month')\n          .endOf('month')\n          .toDate()\n\n        const previousMonthServices = await prisma.services.count({\n          where: {\n            createdAt: {\n              gte: startOfPreviousMonth,\n              lte: endOfPreviousMonth,\n            },\n          },\n        })\n\n        return reply.status(200).send({\n          totalCurrentMonth: servicesInMonth,\n          totalPreviousMonth: previousMonthServices,\n        })\n      }\n    )\n}\n","import dayjs from 'dayjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllQuantityServicesInYear(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/general/year',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca todos os atendimentos cadastrados no ano atual',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.object({\n              totalCurrentYear: z.number(),\n              totalPreviousYear: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        // Obt√©m a data atual\n        const now = dayjs()\n\n        // Obt√©m o primeiro dia do ano atual\n        const startOfYear = now.startOf('year').toDate()\n\n        // Obt√©m o √∫ltimo dia do ano atual\n        const endOfYear = now.endOf('year').toDate()\n\n        // Conta os atendimentos que foram criados no ano atual\n        const servicesInYear = await prisma.services.count({\n          where: {\n            createdAt: {\n              gte: startOfYear,\n              lte: endOfYear,\n            },\n          },\n        })\n\n        // L√≥gica para o m√™s anterior\n        const startOfPreviousYear = now\n          .subtract(1, 'year')\n          .startOf('year')\n          .toDate()\n        const endOfPreviousYear = now.subtract(1, 'year').endOf('year').toDate()\n\n        const previousYearServices = await prisma.services.count({\n          where: {\n            createdAt: {\n              gte: startOfPreviousYear,\n              lte: endOfPreviousYear,\n            },\n          },\n        })\n\n        return reply.status(200).send({\n          totalCurrentYear: servicesInYear,\n          totalPreviousYear: previousYearServices,\n        })\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllServices(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/all',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca todos os atendimentos cadastrados',\n          security: [{ bearerAuth: [] }],\n          querystring: z.object({\n            pageIndex: z.coerce.number().default(1),\n            oab: z.string().optional(),\n            lawyerName: z.string().optional(),\n            agentName: z.string().optional(),\n            assistance: z.enum(['PERSONALLY', 'REMOTE']).optional(), // Filtro por tipo de assistance\n            status: z.enum(['OPEN', 'COMPLETED']).optional(), // Filtro por status\n          }),\n          response: {\n            200: z.object({\n              services: z.array(\n                z.object({\n                  id: z.string().uuid(),\n                  assistance: z.enum(['PERSONALLY', 'REMOTE']),\n                  observation: z.string().nullable(),\n                  status: z.enum(['OPEN', 'COMPLETED']),\n                  createdAt: z.date(),\n                  finishedAt: z.date().nullable(),\n                  lawyer: z.object({\n                    id: z.string().uuid(),\n                    name: z.string(),\n                    oab: z.string(),\n                    email: z.string(),\n                  }),\n                  agent: z.object({\n                    id: z.string().uuid(),\n                    name: z.string(),\n                    email: z.string(),\n                    role: z.enum(['ADMIN', 'MEMBER']),\n                  }),\n                  serviceTypes: z.array(\n                    z.object({\n                      serviceType: z.object({\n                        id: z.string().cuid(),\n                        name: z.string(),\n                      }),\n                    })\n                  ),\n                })\n              ),\n              total: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const { pageIndex, oab, lawyerName, agentName, assistance, status } =\n          request.query\n\n        try {\n          const [services, total] = await Promise.all([\n            prisma.services.findMany({\n              where: {\n                assistance: assistance ? assistance : undefined, // Filtro por assistance\n                status: status ? status : undefined, // Filtro por status\n                lawyer: {\n                  oab: oab ? { contains: oab, mode: 'insensitive' } : undefined,\n                  name: lawyerName\n                    ? { contains: lawyerName, mode: 'insensitive' }\n                    : undefined,\n                },\n                agent: {\n                  name: agentName\n                    ? { contains: agentName, mode: 'insensitive' }\n                    : undefined,\n                },\n              },\n              select: {\n                id: true,\n                assistance: true,\n                observation: true,\n                status: true,\n                createdAt: true,\n                finishedAt: true,\n                lawyer: {\n                  select: {\n                    id: true,\n                    name: true,\n                    oab: true,\n                    email: true,\n                  },\n                },\n                agent: {\n                  select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    role: true,\n                  },\n                },\n                serviceTypes: {\n                  select: {\n                    serviceType: {\n                      select: {\n                        id: true,\n                        name: true,\n                      },\n                    },\n                  },\n                },\n              },\n              orderBy: [\n                { status: 'asc' }, // OPEN antes de COMPLETED\n                { finishedAt: 'desc' }, // Mais recentes primeiro\n                { createdAt: 'desc' }, // Mais recentes primeiro\n              ],\n              skip: (pageIndex - 1) * 10, // Pular os primeiros 10 atendimentos\n              take: 10, // Recuperar apenas 10 atendimentos\n            }),\n            prisma.services.count({\n              where: {\n                assistance: assistance ? assistance : undefined, // Filtro por assistance\n                status: status ? status : undefined, // Filtro por status\n                lawyer: {\n                  oab: oab ? { contains: oab, mode: 'insensitive' } : undefined,\n                  name: lawyerName\n                    ? { contains: lawyerName, mode: 'insensitive' }\n                    : undefined,\n                },\n                agent: {\n                  name: agentName\n                    ? { contains: agentName, mode: 'insensitive' }\n                    : undefined,\n                },\n              },\n            }),\n          ])\n\n          if (!services) {\n            throw new BadRequestError(\n              ' Ainda n√£o existem atendimentos cadastrados.'\n            )\n          }\n\n          return reply.status(200).send({ services, total })\n        } catch (err) {\n          throw new BadRequestError(\n            ' Ocorreu um erro ao tentar recuperar os atendimentos. Por favor, tente novamente mais tarde. Caso o problema persista, entre em contato com o suporte t√©cnico para assist√™ncia.'\n          )\n        }\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllTypesServices(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/types/all',\n      {\n        schema: {\n          tags: ['servicesTypes'],\n          summary: 'Busca todos os tipos de servi√ßos cadastrados',\n          security: [{ bearerAuth: [] }],\n          querystring: z.object({\n            pageIndex: z.coerce.number().default(1),\n            id: z.string().cuid().optional(),\n            name: z.string().optional(),\n          }),\n          response: {\n            200: z.object({\n              servicesTypes: z.array(\n                z.object({\n                  id: z.string().cuid(),\n                  name: z.string(),\n                })\n              ),\n              total: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente administradores podem listar todos os funcion√°rios\n        await request.checkIfAgentIsAdmin()\n\n        const { pageIndex, id, name } = request.query\n\n        try {\n          const [servicesTypes, total] = await Promise.all([\n            prisma.serviceTypes.findMany({\n              where: {\n                id: id && { equals: id },\n                name: name\n                  ? { contains: name, mode: 'insensitive' }\n                  : undefined,\n              },\n              select: {\n                id: true,\n                name: true,\n              },\n              orderBy: [\n                {\n                  createdAt: 'desc', // Mostra os tipos de servi√ßos mais recentes primeiro\n                },\n              ],\n              skip: (pageIndex - 1) * 10,\n              take: 10,\n            }),\n            prisma.serviceTypes.count({\n              where: {\n                id: id && { equals: id },\n                name: name\n                  ? { contains: name, mode: 'insensitive' }\n                  : undefined,\n              },\n            }),\n          ])\n\n          if (!servicesTypes) {\n            throw new BadRequestError(\n              'Nenhum tipo de servi√ßo cadastrado. Cadastre um para continuar.'\n            )\n          }\n\n          return reply.status(200).send({ servicesTypes, total })\n        } catch (err) {\n          throw new BadRequestError(\n            'N√£o foi poss√≠vel recuperar os tipos de servi√ßos. Tente novamente mais tarde.'\n          )\n        }\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllTypesServicesWithoutPagination(\n  app: FastifyInstance\n) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/types/all-wp',\n      {\n        schema: {\n          tags: ['servicesTypes'],\n          summary: 'Busca todos os tipos de servi√ßos cadastrados sem pagina√ß√£o',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.object({\n              servicesTypes: z.array(\n                z.object({\n                  id: z.string().cuid(),\n                  name: z.string(),\n                })\n              ),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const servicesTypes = await prisma.serviceTypes.findMany({\n          select: {\n            id: true,\n            name: true,\n          },\n          orderBy: [\n            {\n              createdAt: 'desc', // Mostra os tipos de servi√ßos mais recentes primeiro\n            },\n          ],\n        })\n\n        if (!servicesTypes) {\n          throw new BadRequestError(\n            'Nenhum tipo de servi√ßo cadastrado. Cadastre um para continuar.'\n          )\n        }\n\n        return reply.status(200).send({ servicesTypes })\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function updateTypeService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .put(\n      '/services/types/update/:id',\n      {\n        schema: {\n          tags: ['servicesTypes'],\n          summary: 'Atualiza√ß√£o de um tipo de servi√ßo',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().cuid(),\n          }),\n          body: z.object({\n            name: z.string().min(6),\n          }),\n          response: {\n            204: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente administradores podem atualizar tipos de servi√ßos\n        await request.checkIfAgentIsAdmin()\n\n        const { id } = request.params\n        const { name } = request.body\n\n        const serviceType = await prisma.serviceTypes.findUnique({\n          where: { id },\n        })\n\n        if (!serviceType) {\n          throw new UnauthorizedError(\n            'Servi√ßo n√£o encontrado. Verifique as informa√ß√µes e tente novamente.'\n          )\n        }\n\n        if (name === serviceType.name) {\n          throw new BadRequestError(\n            'O nome inserido j√° est√° registrado para este servi√ßo. Revise e insira uma nova op√ß√£o.'\n          )\n        }\n\n        // Verifica se o nome do tipo de servi√ßo foi alterado\n        if (serviceType && name !== serviceType.name) {\n          // Verifica se o nome do tipo de servi√ßo ja existe na base de dados\n          const serviceTypeExists = await prisma.serviceTypes.findUnique({\n            where: { name },\n          })\n\n          if (serviceTypeExists) {\n            throw new UnauthorizedError(\n              'O tipo de servi√ßo informado j√° existe. Insira um nome √∫nico para prosseguir.'\n            )\n          }\n        }\n\n        try {\n          await prisma.serviceTypes.update({\n            where: {\n              id,\n            },\n            data: {\n              name,\n              updateAt: new Date(),\n            },\n          })\n\n          return reply.status(204).send()\n        } catch (err) {\n          throw new UnauthorizedError(\n            'Erro na atualiza√ß√£o. Verifique os dados e tente novamente.'\n          )\n        }\n      }\n    )\n}\n","import { hash } from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { env } from 'http/_env'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport { resend } from 'lib/resend'\nimport { AgentRegistrationEmail } from 'utils/emails/agent-registration-email'\nimport { z } from 'zod'\n\nexport async function createAccountService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .post(\n      '/agents',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Cria√ß√£o de um novo funcion√°rio',\n          security: [{ bearerAuth: [] }],\n          body: z.object({\n            name: z.string(),\n            email: z.string().email(),\n            password: z.string().min(8),\n          }),\n          response: {\n            201: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente admins podem criar um novo funcion√°rio\n        await request.checkIfAgentIsAdmin()\n\n        const { name, email, password } = request.body\n\n        const userWithSameEmail = await prisma.agent.findUnique({\n          where: {\n            email,\n          },\n        })\n\n        if (userWithSameEmail) {\n          throw new BadRequestError(\n            'E-mail j√° cadastrado para outro funcion√°rio.'\n          )\n        }\n\n        const passwordHash = await hash(password, 8)\n\n        // Envia email de boas vindas para o novo funcion√°rio com seus dados\n        await resend.emails.send({\n          from: 'üìß OAB Atende <oabatende@oabma.com.br>',\n          to: email,\n          subject: 'üéâ Bem-vindo √† equipe! Aqui est√£o suas informa√ß√µes.',\n          react: AgentRegistrationEmail({\n            name,\n            email,\n            tempPassword: password,\n            link: env.WEB_URL,\n          }),\n        })\n\n        try {\n          await prisma.agent.create({\n            data: {\n              name,\n              email,\n              passwordHash,\n            },\n          })\n\n          return reply.status(201).send()\n        } catch (err) {\n          throw new BadRequestError(\n            'Erro ao criar funcion√°rio. Por favor, tente novamente.'\n          )\n        }\n      }\n    )\n}\n","import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Heading,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Tailwind,\n  Text,\n} from '@react-email/components'\nimport * as React from 'react'\n\ninterface PasswordResetEmailProps {\n  name: string\n  email: string\n  tempPassword: string\n  link: string\n}\n\n// @ts-ignore somente para o react-email\nReact.version\n\nexport const AgentRegistrationEmail = ({\n  name,\n  email,\n  tempPassword,\n  link,\n}: PasswordResetEmailProps) => {\n  const currentYear = new Date().getFullYear()\n  const sendDate = new Date().toLocaleDateString('pt-BR')\n\n  return (\n    <Html>\n      <Head />\n      <Preview>\n        Bem-vindo(a) √† OAB Atende! Confira os detalhes do seu cadastro.\n      </Preview>\n\n      <Tailwind>\n        <Body className=\"bg-gray-100 font-sans\">\n          <Container className=\"bg-white border border-gray-200 rounded-lg p-8 mx-auto my-8 max-w-xl\">\n            <Heading className=\"text-2xl font-bold text-center text-blue-700 mb-6\">\n              Bem-vindo(a) √† OAB Atende!\n            </Heading>\n            <Text className=\"text-gray-700 mb-6\">\n              Ol√°, <b>{name}</b>\n            </Text>\n            <Text className=\"text-gray-700 mb-6\">\n              Estamos muito felizes em t√™-lo(a) conosco! Abaixo est√£o os\n              detalhes do seu cadastro:\n            </Text>\n            <Section className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n              <Text className=\"text-gray-700 mb-2\">\n                <b>Nome:</b> {name}\n              </Text>\n              <Text className=\"text-gray-700 mb-2\">\n                <b>E-mail:</b> {email}\n              </Text>\n              <Text className=\"text-gray-700\">\n                <b>Senha provis√≥ria:</b> {tempPassword}\n              </Text>\n            </Section>\n            <Text className=\"text-gray-700 mb-6\">\n              Voc√™ est√° recebendo uma senha tempor√°ria para acessar o sistema da\n              OAB Atende. Por quest√µes de seguran√ßa, √© obrigat√≥rio que voc√™\n              realize a redefini√ß√£o de senha.\n            </Text>\n            <Button\n              href={link}\n              className=\"bg-blue-600 text-white font-bold py-3 px-6 rounded-lg text-center block\"\n            >\n              Acessar o Sistema\n            </Button>\n            <Hr className=\"border-gray-200 my-6\" />\n            <Text className=\"text-sm text-gray-500 text-center\">\n              Este √© um e-mail autom√°tico. Por favor, n√£o responda a esta\n              mensagem.\n            </Text>\n            <Hr className=\"border-gray-200 my-6\" />\n            <Text className=\"text-xs text-gray-400 text-center\">\n              &copy; {currentYear} OAB Atende. Todos os direitos reservados.\n            </Text>\n            <Text className=\"text-xs text-gray-400 text-center\">\n              Este e-mail foi enviado em {sendDate}.\n            </Text>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  )\n}\n","import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getServicesByMonthForChart(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/monthly',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca a quantidade de atendimentos por m√™s',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.array(\n              z.object({\n                data: z.string(),\n                services: z.number(),\n              })\n            ),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        try {\n          const services = await prisma.services.groupBy({\n            by: ['createdAt'],\n            _count: {\n              id: true,\n            },\n            orderBy: {\n              createdAt: 'asc',\n            },\n          })\n\n          const months = [\n            'Jan',\n            'Fev',\n            'Mar',\n            'Abr',\n            'Mai',\n            'Jun',\n            'Jul',\n            'Ago',\n            'Set',\n            'Out',\n            'Nov',\n            'Dez',\n          ]\n\n          const formattedData = months.map((month, index) => {\n            const monthData = services.filter(\n              service => new Date(service.createdAt).getMonth() === index\n            )\n\n            return {\n              data: month,\n              services: monthData.reduce(\n                (sum, service) => sum + service._count.id,\n                0\n              ),\n            }\n          })\n\n          return reply.status(200).send(formattedData)\n        } catch (err) {\n          throw new BadRequestError(\n            'Ocorreu um erro ao tentar recuperar os atendimentos mensais. Por favor, tente novamente mais tarde.'\n          )\n        }\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\n\nimport { activeAgent } from 'http/core/agents/active-agent'\nimport { authenticate } from 'http/core/agents/authenticate'\nimport { getAll } from 'http/core/agents/get-all'\nimport { getProfile } from 'http/core/agents/get-profile'\nimport { inactiveAgent } from 'http/core/agents/inactive-agent'\nimport { logoutAgent } from 'http/core/agents/logout-agent'\nimport { requestPasswordRecover } from 'http/core/agents/request-password-recover'\nimport { resetPassword } from 'http/core/agents/reset-password'\nimport { updateAgent } from 'http/core/agents/update-agent'\nimport { cancelService } from 'http/core/services/cancel-service'\nimport { consultLawyer } from 'http/core/services/consult-lawyer'\nimport { createService } from 'http/core/services/create-service'\nimport { createServiceExternal } from 'http/core/services/create-service-external'\nimport { createTypeService } from 'http/core/services/create-type-service'\nimport { finishedService } from 'http/core/services/finished-service'\nimport { getAllQuantityServices } from 'http/core/services/get-all-quantity-services'\nimport { getAllQuantityServicesByAgent } from 'http/core/services/get-all-quantity-services-by-agent'\nimport { getAllQuantityServicesInMonth } from 'http/core/services/get-all-quantity-services-in-month'\nimport { getAllQuantityServicesInYear } from 'http/core/services/get-all-quantity-services-in-year'\nimport { getAllServices } from 'http/core/services/get-all-services'\nimport { getAllTypesServices } from 'http/core/services/get-all-types-services'\nimport { getAllTypesServicesWithoutPagination } from 'http/core/services/get-all-types-services-without-pagination'\nimport { updateTypeService } from 'http/core/services/update-type-service'\nimport { createAccountService } from '../core/agents/create-account'\nimport { getServicesByMonthForChart } from 'http/core/services/get-services-by-month-for-chart'\n\nexport async function routes(app: FastifyInstance) {\n  // Rotas de agents\n  app.register(createAccountService)\n  app.register(authenticate)\n  app.register(getProfile)\n  app.register(requestPasswordRecover)\n  app.register(resetPassword)\n  app.register(getAll)\n  app.register(updateAgent)\n  app.register(inactiveAgent)\n  app.register(activeAgent)\n  app.register(logoutAgent)\n\n  // Rotas de services types\n  app.register(createTypeService)\n  app.register(getAllTypesServices)\n  app.register(updateTypeService)\n\n  // Rotas de services\n  app.register(createService)\n  app.register(createServiceExternal)\n  app.register(consultLawyer)\n  app.register(getAllServices)\n  app.register(finishedService)\n  app.register(cancelService)\n  app.register(getAllQuantityServices)\n  app.register(getAllTypesServicesWithoutPagination)\n  app.register(getAllQuantityServicesInMonth)\n  app.register(getAllQuantityServicesInYear)\n  app.register(getAllQuantityServicesByAgent)\n  app.register(getServicesByMonthForChart)\n}\n"],"mappings":"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","names":["import_zod","app","import_zod","app","z","import_zod","app","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","import_bcryptjs","import_zod","app","import_zod","app","z","import_zod","app","z","import_axios","axios","import_zod","app","import_zod","app","import_zod","app","z","import_zod","app","import_zod","app","z","import_zod","app","z","import_zod","app","dayjs","import_dayjs","import_zod","app","z","dayjs","import_dayjs","import_zod","app","z","dayjs","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_zod","app","z","import_bcryptjs","import_components","React","import_zod","app","import_zod","app","z","app"]}