{"version":3,"sources":["../../../../src/http/core/services/get-all-quantity-services-in-year.ts","../../../../src/http/middlewares/auth.ts","../../../../src/http/_errors/unauthorized-error.ts","../../../../src/lib/prisma.ts","../../../../src/http/_env/index.ts"],"sourcesContent":["import dayjs from 'dayjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllQuantityServicesInYear(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/general/year',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca todos os atendimentos cadastrados no ano atual',\n          security: [{ bearerAuth: [] }],\n          response: {\n            200: z.object({\n              totalCurrentYear: z.number(),\n              totalPreviousYear: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        // Obtém a data atual\n        const now = dayjs()\n\n        // Obtém o primeiro dia do ano atual\n        const startOfYear = now.startOf('year').toDate()\n\n        // Obtém o último dia do ano atual\n        const endOfYear = now.endOf('year').toDate()\n\n        // Conta os atendimentos que foram criados no ano atual\n        const servicesInYear = await prisma.services.count({\n          where: {\n            createdAt: {\n              gte: startOfYear,\n              lte: endOfYear,\n            },\n          },\n        })\n\n        // Lógica para o mês anterior\n        const startOfPreviousYear = now\n          .subtract(1, 'year')\n          .startOf('year')\n          .toDate()\n        const endOfPreviousYear = now.subtract(1, 'year').endOf('year').toDate()\n\n        const previousYearServices = await prisma.services.count({\n          where: {\n            createdAt: {\n              gte: startOfPreviousYear,\n              lte: endOfPreviousYear,\n            },\n          },\n        })\n\n        return reply.status(200).send({\n          totalCurrentYear: servicesInYear,\n          totalPreviousYear: previousYearServices,\n        })\n      }\n    )\n}\n","import type { FastifyInstance } from 'fastify'\nimport { fastifyPlugin } from 'fastify-plugin'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\n\nexport const auth = fastifyPlugin(async (app: FastifyInstance) => {\n  app.addHook('preHandler', async request => {\n    request.getCurrentAgentId = async () => {\n      try {\n        // Verifica se o token é valido e retorna o sub\n        const { sub } = await request.jwtVerify<{ sub: string }>()\n\n        return sub\n      } catch {\n        throw new UnauthorizedError(\n          'Token inválido ou expirado. Faça login novamente.'\n        )\n      }\n    }\n\n    request.checkIfAgentIsAdmin = async () => {\n      // Verifica o token primeiro\n      const { sub } = await request.jwtVerify<{ sub: string }>().catch(() => {\n        throw new UnauthorizedError(\n          'Token inválido ou expirado. Verifique as informações e tente novamente.'\n        )\n      })\n\n      // Busca o agente no banco de dados\n      const agent = await prisma.agent.findUnique({\n        where: { id: sub },\n        select: { role: true },\n      })\n\n      if (!agent) {\n        throw new UnauthorizedError(\n          'Funcionário não encontrado. Verifique os dados e tente novamente.'\n        )\n      }\n\n      if (agent.role === 'MEMBER') {\n        throw new UnauthorizedError(\n          'Permissão negada. Você precisa ser um administrador para realizar esta ação.'\n        )\n      }\n    }\n  })\n})\n","export class UnauthorizedError extends Error {\n  constructor(message?: string) {\n    super(message ?? ' Acesso não autorizado, tente novamente.')\n  }\n}\n","import { PrismaClient } from '@prisma/client'\nimport { env } from 'http/_env'\n\nexport const prisma = new PrismaClient({\n  // Gera logs de queries apenas em ambiente de desenvolvimento\n  log: env.NODE_ENV === 'DEVELOPMENT' ? ['query'] : [],\n})\n","import 'dotenv/config'\nimport { z } from 'zod'\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.coerce.number().default(3892),\n  DATABASE_URL: z.string().url(),\n  PASSWORD_ADMIN_FULL: z.string().min(8),\n  EMAIL_ADMIN_FULL: z.string().email(),\n  JWT_SECRET: z.string().min(8),\n  RESEND_API_KEY: z.string(),\n  WEB_URL: z.string().url(),\n  API_PROTHEUS_DATA_URL: z.string().url(),\n  API_PROTHEUS_FIN_URL: z.string().url(),\n})\n\nconst _env = envSchema.safeParse(process.env)\n\nif (_env.success === false) {\n  console.error(\n    '> ❌ Variáveis de ambiente inválidas, verifique o arquivo .env',\n    _env.error.format()\n  )\n\n  throw new Error('❌ Houve um erro ao carregar as variáveis de ambiente.')\n}\n\nexport const env = _env.data\n"],"mappings":"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","names":["import_zod","z","dayjs"]}