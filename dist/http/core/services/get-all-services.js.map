{"version":3,"sources":["../../../../src/http/core/services/get-all-services.ts","../../../../src/http/_errors/bad-request-error.ts","../../../../src/http/middlewares/auth.ts","../../../../src/http/_errors/unauthorized-error.ts","../../../../src/lib/prisma.ts","../../../../src/http/_env/index.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function getAllServices(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .get(\n      '/services/all',\n      {\n        schema: {\n          tags: ['services'],\n          summary: 'Busca todos os atendimentos cadastrados',\n          security: [{ bearerAuth: [] }],\n          querystring: z.object({\n            pageIndex: z.coerce.number().default(1),\n            oab: z.string().optional(),\n            lawyerName: z.string().optional(),\n            agentName: z.string().optional(),\n            assistance: z.enum(['PERSONALLY', 'REMOTE']).optional(), // Filtro por tipo de assistance\n            status: z.enum(['OPEN', 'COMPLETED']).optional(), // Filtro por status\n          }),\n          response: {\n            200: z.object({\n              services: z.array(\n                z.object({\n                  id: z.string().uuid(),\n                  assistance: z.enum(['PERSONALLY', 'REMOTE']),\n                  observation: z.string().nullable(),\n                  status: z.enum(['OPEN', 'COMPLETED']),\n                  createdAt: z.date(),\n                  finishedAt: z.date().nullable(),\n                  lawyer: z.object({\n                    id: z.string().uuid(),\n                    name: z.string(),\n                    oab: z.string(),\n                    email: z.string(),\n                  }),\n                  agent: z.object({\n                    id: z.string().uuid(),\n                    name: z.string(),\n                    email: z.string(),\n                    role: z.enum(['ADMIN', 'MEMBER']),\n                  }),\n                  serviceTypes: z.array(\n                    z.object({\n                      serviceType: z.object({\n                        id: z.string().cuid(),\n                        name: z.string(),\n                      }),\n                    })\n                  ),\n                })\n              ),\n              total: z.number(),\n            }),\n          },\n        },\n      },\n      async (request, reply) => {\n        await request.getCurrentAgentId()\n\n        const { pageIndex, oab, lawyerName, agentName, assistance, status } =\n          request.query\n\n        try {\n          const [services, total] = await Promise.all([\n            prisma.services.findMany({\n              where: {\n                assistance: assistance ? assistance : undefined, // Filtro por assistance\n                status: status ? status : undefined, // Filtro por status\n                lawyer: {\n                  oab: oab ? { contains: oab, mode: 'insensitive' } : undefined,\n                  name: lawyerName\n                    ? { contains: lawyerName, mode: 'insensitive' }\n                    : undefined,\n                },\n                agent: {\n                  name: agentName\n                    ? { contains: agentName, mode: 'insensitive' }\n                    : undefined,\n                },\n              },\n              select: {\n                id: true,\n                assistance: true,\n                observation: true,\n                status: true,\n                createdAt: true,\n                finishedAt: true,\n                lawyer: {\n                  select: {\n                    id: true,\n                    name: true,\n                    oab: true,\n                    email: true,\n                  },\n                },\n                agent: {\n                  select: {\n                    id: true,\n                    name: true,\n                    email: true,\n                    role: true,\n                  },\n                },\n                serviceTypes: {\n                  select: {\n                    serviceType: {\n                      select: {\n                        id: true,\n                        name: true,\n                      },\n                    },\n                  },\n                },\n              },\n              orderBy: [\n                { status: 'asc' }, // OPEN antes de COMPLETED\n                { finishedAt: 'desc' }, // Mais recentes primeiro\n                { createdAt: 'desc' }, // Mais recentes primeiro\n              ],\n              skip: (pageIndex - 1) * 10, // Pular os primeiros 10 atendimentos\n              take: 10, // Recuperar apenas 10 atendimentos\n            }),\n            prisma.services.count({\n              where: {\n                assistance: assistance ? assistance : undefined, // Filtro por assistance\n                status: status ? status : undefined, // Filtro por status\n                lawyer: {\n                  oab: oab ? { contains: oab, mode: 'insensitive' } : undefined,\n                  name: lawyerName\n                    ? { contains: lawyerName, mode: 'insensitive' }\n                    : undefined,\n                },\n                agent: {\n                  name: agentName\n                    ? { contains: agentName, mode: 'insensitive' }\n                    : undefined,\n                },\n              },\n            }),\n          ])\n\n          if (!services) {\n            throw new BadRequestError(\n              ' Ainda não existem atendimentos cadastrados.'\n            )\n          }\n\n          return reply.status(200).send({ services, total })\n        } catch (err) {\n          throw new BadRequestError(\n            ' Ocorreu um erro ao tentar recuperar os atendimentos. Por favor, tente novamente mais tarde. Caso o problema persista, entre em contato com o suporte técnico para assistência.'\n          )\n        }\n      }\n    )\n}\n","export class BadRequestError extends Error {}\n","import type { FastifyInstance } from 'fastify'\nimport { fastifyPlugin } from 'fastify-plugin'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\n\nexport const auth = fastifyPlugin(async (app: FastifyInstance) => {\n  app.addHook('preHandler', async request => {\n    request.getCurrentAgentId = async () => {\n      try {\n        // Verifica se o token é valido e retorna o sub\n        const { sub } = await request.jwtVerify<{ sub: string }>()\n\n        return sub\n      } catch {\n        throw new UnauthorizedError(\n          'Token inválido ou expirado. Faça login novamente.'\n        )\n      }\n    }\n\n    request.checkIfAgentIsAdmin = async () => {\n      // Verifica o token primeiro\n      const { sub } = await request.jwtVerify<{ sub: string }>().catch(() => {\n        throw new UnauthorizedError(\n          'Token inválido ou expirado. Verifique as informações e tente novamente.'\n        )\n      })\n\n      // Busca o agente no banco de dados\n      const agent = await prisma.agent.findUnique({\n        where: { id: sub },\n        select: { role: true },\n      })\n\n      if (!agent) {\n        throw new UnauthorizedError(\n          'Funcionário não encontrado. Verifique os dados e tente novamente.'\n        )\n      }\n\n      if (agent.role === 'MEMBER') {\n        throw new UnauthorizedError(\n          'Permissão negada. Você precisa ser um administrador para realizar esta ação.'\n        )\n      }\n    }\n  })\n})\n","export class UnauthorizedError extends Error {\n  constructor(message?: string) {\n    super(message ?? ' Acesso não autorizado, tente novamente.')\n  }\n}\n","import { PrismaClient } from '@prisma/client'\nimport { env } from 'http/_env'\n\nexport const prisma = new PrismaClient({\n  // Gera logs de queries apenas em ambiente de desenvolvimento\n  log: env.NODE_ENV === 'DEVELOPMENT' ? ['query'] : [],\n})\n","import 'dotenv/config'\nimport { z } from 'zod'\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.coerce.number().default(3892),\n  DATABASE_URL: z.string().url(),\n  PASSWORD_ADMIN_FULL: z.string().min(8),\n  EMAIL_ADMIN_FULL: z.string().email(),\n  JWT_SECRET: z.string().min(8),\n  RESEND_API_KEY: z.string(),\n  WEB_URL: z.string().url(),\n  API_PROTHEUS_DATA_URL: z.string().url(),\n  API_PROTHEUS_FIN_URL: z.string().url(),\n})\n\nconst _env = envSchema.safeParse(process.env)\n\nif (_env.success === false) {\n  console.error(\n    '> ❌ Variáveis de ambiente inválidas, verifique o arquivo .env',\n    _env.error.format()\n  )\n\n  throw new Error('❌ Houve um erro ao carregar as variáveis de ambiente.')\n}\n\nexport const env = _env.data\n"],"mappings":"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","names":["import_zod","z"]}