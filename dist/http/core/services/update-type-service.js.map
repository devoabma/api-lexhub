{"version":3,"sources":["../../../../src/http/core/services/update-type-service.ts","../../../../src/http/_errors/bad-request-error.ts","../../../../src/http/_errors/unauthorized-error.ts","../../../../src/http/middlewares/auth.ts","../../../../src/lib/prisma.ts","../../../../src/http/_env/index.ts"],"sourcesContent":["import type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport z from 'zod'\n\nexport async function updateTypeService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .put(\n      '/services/types/update/:id',\n      {\n        schema: {\n          tags: ['servicesTypes'],\n          summary: 'Atualização de um tipo de serviço',\n          security: [{ bearerAuth: [] }],\n          params: z.object({\n            id: z.string().cuid(),\n          }),\n          body: z.object({\n            name: z.string().min(6),\n          }),\n          response: {\n            204: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente administradores podem atualizar tipos de serviços\n        await request.checkIfAgentIsAdmin()\n\n        const { id } = request.params\n        const { name } = request.body\n\n        const serviceType = await prisma.serviceTypes.findUnique({\n          where: { id },\n        })\n\n        if (!serviceType) {\n          throw new UnauthorizedError(\n            'Serviço não encontrado. Verifique as informações e tente novamente.'\n          )\n        }\n\n        if (name === serviceType.name) {\n          throw new BadRequestError(\n            'O nome inserido já está registrado para este serviço. Revise e insira uma nova opção.'\n          )\n        }\n\n        // Verifica se o nome do tipo de serviço foi alterado\n        if (serviceType && name !== serviceType.name) {\n          // Verifica se o nome do tipo de serviço ja existe na base de dados\n          const serviceTypeExists = await prisma.serviceTypes.findUnique({\n            where: { name },\n          })\n\n          if (serviceTypeExists) {\n            throw new UnauthorizedError(\n              'O tipo de serviço informado já existe. Insira um nome único para prosseguir.'\n            )\n          }\n        }\n\n        try {\n          await prisma.serviceTypes.update({\n            where: {\n              id,\n            },\n            data: {\n              name,\n              updateAt: new Date(),\n            },\n          })\n\n          return reply.status(204).send()\n        } catch (err) {\n          throw new UnauthorizedError(\n            'Erro na atualização. Verifique os dados e tente novamente.'\n          )\n        }\n      }\n    )\n}\n","export class BadRequestError extends Error {}\n","export class UnauthorizedError extends Error {\n  constructor(message?: string) {\n    super(message ?? ' Acesso não autorizado, tente novamente.')\n  }\n}\n","import type { FastifyInstance } from 'fastify'\nimport { fastifyPlugin } from 'fastify-plugin'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\n\nexport const auth = fastifyPlugin(async (app: FastifyInstance) => {\n  app.addHook('preHandler', async request => {\n    request.getCurrentAgentId = async () => {\n      try {\n        // Verifica se o token é valido e retorna o sub\n        const { sub } = await request.jwtVerify<{ sub: string }>()\n\n        return sub\n      } catch {\n        throw new UnauthorizedError(\n          'Token inválido ou expirado. Faça login novamente.'\n        )\n      }\n    }\n\n    request.checkIfAgentIsAdmin = async () => {\n      // Verifica o token primeiro\n      const { sub } = await request.jwtVerify<{ sub: string }>().catch(() => {\n        throw new UnauthorizedError(\n          'Token inválido ou expirado. Verifique as informações e tente novamente.'\n        )\n      })\n\n      // Busca o agente no banco de dados\n      const agent = await prisma.agent.findUnique({\n        where: { id: sub },\n        select: { role: true },\n      })\n\n      if (!agent) {\n        throw new UnauthorizedError(\n          'Funcionário não encontrado. Verifique os dados e tente novamente.'\n        )\n      }\n\n      if (agent.role === 'MEMBER') {\n        throw new UnauthorizedError(\n          'Permissão negada. Você precisa ser um administrador para realizar esta ação.'\n        )\n      }\n    }\n  })\n})\n","import { PrismaClient } from '@prisma/client'\nimport { env } from 'http/_env'\n\nexport const prisma = new PrismaClient({\n  // Gera logs de queries apenas em ambiente de desenvolvimento\n  log: env.NODE_ENV === 'DEVELOPMENT' ? ['query'] : [],\n})\n","import 'dotenv/config'\nimport { z } from 'zod'\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.coerce.number().default(3892),\n  DATABASE_URL: z.string().url(),\n  PASSWORD_ADMIN_FULL: z.string().min(8),\n  EMAIL_ADMIN_FULL: z.string().email(),\n  JWT_SECRET: z.string().min(8),\n  RESEND_API_KEY: z.string(),\n  WEB_URL: z.string().url(),\n  API_PROTHEUS_DATA_URL: z.string().url(),\n  API_PROTHEUS_FIN_URL: z.string().url(),\n})\n\nconst _env = envSchema.safeParse(process.env)\n\nif (_env.success === false) {\n  console.error(\n    '> ❌ Variáveis de ambiente inválidas, verifique o arquivo .env',\n    _env.error.format()\n  )\n\n  throw new Error('❌ Houve um erro ao carregar as variáveis de ambiente.')\n}\n\nexport const env = _env.data\n"],"mappings":"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","names":["import_zod","z"]}