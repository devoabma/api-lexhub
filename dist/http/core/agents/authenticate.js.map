{"version":3,"sources":["../../../../src/http/core/agents/authenticate.ts","../../../../src/http/_errors/bad-request-error.ts","../../../../src/lib/prisma.ts","../../../../src/http/_env/index.ts"],"sourcesContent":["import { compare } from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\nimport { z } from 'zod'\n\nexport async function authenticate(app: FastifyInstance) {\n  app.withTypeProvider<ZodTypeProvider>().post(\n    '/agents/sessions',\n    {\n      schema: {\n        tags: ['agents'],\n        summary: 'Autenticação de um funcionário',\n        body: z.object({\n          email: z.string().email(),\n          password: z.string().min(8),\n        }),\n        response: {\n          201: z.object({\n            token: z.string(),\n          }),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { email, password } = request.body\n\n      const userFromEmail = await prisma.agent.findUnique({\n        where: {\n          email,\n        },\n      })\n\n      // Verifica se o usuário foi desativado pelo administrador\n      if (userFromEmail && userFromEmail.inactive !== null) {\n        throw new BadRequestError(\n          'O funcionário está inativo. Procure com o administrador do sistema.'\n        )\n      }\n\n      if (!userFromEmail) {\n        throw new BadRequestError(\n          'Credenciais inválidas. Verifique suas informações e tente novamente.'\n        )\n      }\n\n      const isPasswordValid = await compare(\n        password,\n        userFromEmail.passwordHash\n      )\n\n      if (!isPasswordValid) {\n        throw new BadRequestError(\n          'Credenciais inválidas. Verifique suas informações e tente novamente.'\n        )\n      }\n\n      // Criação do token de autenticação\n      const token = await reply.jwtSign(\n        {\n          // Envia o id do usuário para o token\n          sub: userFromEmail.id,\n          role: userFromEmail.role,\n        },\n        {\n          sign: {\n            expiresIn: '1d',\n          },\n        }\n      )\n\n      return reply\n        .setCookie('@lexhub-auth', token, {\n          path: '/',\n          httpOnly: true,\n          sameSite: true,\n          maxAge: 60 * 60 * 24,\n        })\n        .status(201)\n        .send({\n          token,\n        })\n    }\n  )\n}\n","export class BadRequestError extends Error {}\n","import { PrismaClient } from '@prisma/client'\nimport { env } from 'http/_env'\n\nexport const prisma = new PrismaClient({\n  // Gera logs de queries apenas em ambiente de desenvolvimento\n  log: env.NODE_ENV === 'DEVELOPMENT' ? ['query'] : [],\n})\n","import 'dotenv/config'\nimport { z } from 'zod'\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.coerce.number().default(3892),\n  DATABASE_URL: z.string().url(),\n  PASSWORD_ADMIN_FULL: z.string().min(8),\n  EMAIL_ADMIN_FULL: z.string().email(),\n  JWT_SECRET: z.string().min(8),\n  RESEND_API_KEY: z.string(),\n  WEB_URL: z.string().url(),\n  API_PROTHEUS_DATA_URL: z.string().url(),\n  API_PROTHEUS_FIN_URL: z.string().url(),\n})\n\nconst _env = envSchema.safeParse(process.env)\n\nif (_env.success === false) {\n  console.error(\n    '> ❌ Variáveis de ambiente inválidas, verifique o arquivo .env',\n    _env.error.format()\n  )\n\n  throw new Error('❌ Houve um erro ao carregar as variáveis de ambiente.')\n}\n\nexport const env = _env.data\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAwB;;;ACAjB,IAAM,kBAAN,cAA8B,MAAM;AAAC;;;ACA5C,oBAA6B;;;ACA7B,oBAAO;AACP,iBAAkB;AAElB,IAAM,YAAY,aAAE,OAAO;AAAA,EACzB,UAAU,aAAE,KAAK,CAAC,eAAe,YAAY,CAAC,EAAE,QAAQ,aAAa;AAAA,EACrE,MAAM,aAAE,OAAO,OAAO,EAAE,QAAQ,IAAI;AAAA,EACpC,cAAc,aAAE,OAAO,EAAE,IAAI;AAAA,EAC7B,qBAAqB,aAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EACrC,kBAAkB,aAAE,OAAO,EAAE,MAAM;AAAA,EACnC,YAAY,aAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC5B,gBAAgB,aAAE,OAAO;AAAA,EACzB,SAAS,aAAE,OAAO,EAAE,IAAI;AAAA,EACxB,uBAAuB,aAAE,OAAO,EAAE,IAAI;AAAA,EACtC,sBAAsB,aAAE,OAAO,EAAE,IAAI;AACvC,CAAC;AAED,IAAM,OAAO,UAAU,UAAU,QAAQ,GAAG;AAE5C,IAAI,KAAK,YAAY,OAAO;AAC1B,UAAQ;AAAA,IACN;AAAA,IACA,KAAK,MAAM,OAAO;AAAA,EACpB;AAEA,QAAM,IAAI,MAAM,+DAAuD;AACzE;AAEO,IAAM,MAAM,KAAK;;;ADxBjB,IAAM,SAAS,IAAI,2BAAa;AAAA;AAAA,EAErC,KAAK,IAAI,aAAa,gBAAgB,CAAC,OAAO,IAAI,CAAC;AACrD,CAAC;;;AFAD,IAAAA,cAAkB;AAElB,eAAsB,aAAa,KAAsB;AACvD,MAAI,iBAAkC,EAAE;AAAA,IACtC;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,QACN,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS;AAAA,QACT,MAAM,cAAE,OAAO;AAAA,UACb,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,UACxB,UAAU,cAAE,OAAO,EAAE,IAAI,CAAC;AAAA,QAC5B,CAAC;AAAA,QACD,UAAU;AAAA,UACR,KAAK,cAAE,OAAO;AAAA,YACZ,OAAO,cAAE,OAAO;AAAA,UAClB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,IACA,OAAO,SAAS,UAAU;AACxB,YAAM,EAAE,OAAO,SAAS,IAAI,QAAQ;AAEpC,YAAM,gBAAgB,MAAM,OAAO,MAAM,WAAW;AAAA,QAClD,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACF,CAAC;AAGD,UAAI,iBAAiB,cAAc,aAAa,MAAM;AACpD,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAM,kBAAkB,UAAM;AAAA,QAC5B;AAAA,QACA,cAAc;AAAA,MAChB;AAEA,UAAI,CAAC,iBAAiB;AACpB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAGA,YAAM,QAAQ,MAAM,MAAM;AAAA,QACxB;AAAA;AAAA,UAEE,KAAK,cAAc;AAAA,UACnB,MAAM,cAAc;AAAA,QACtB;AAAA,QACA;AAAA,UACE,MAAM;AAAA,YACJ,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAEA,aAAO,MACJ,UAAU,gBAAgB,OAAO;AAAA,QAChC,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ,KAAK,KAAK;AAAA,MACpB,CAAC,EACA,OAAO,GAAG,EACV,KAAK;AAAA,QACJ;AAAA,MACF,CAAC;AAAA,IACL;AAAA,EACF;AACF;","names":["import_zod"]}