{"version":3,"sources":["../../../../src/http/core/agents/reset-password.ts","../../../../src/http/_errors/unauthorized-error.ts","../../../../src/lib/prisma.ts","../../../../src/http/_env/index.ts"],"sourcesContent":["import { compare, hash } from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\nimport { z } from 'zod'\n\nexport async function resetPassword(app: FastifyInstance) {\n  app.withTypeProvider<ZodTypeProvider>().post(\n    '/agents/password/reset',\n    {\n      schema: {\n        tags: ['agents'],\n        summary: 'Reset de senha de um funcionário',\n        body: z.object({\n          code: z.string(),\n          password: z.string().min(8),\n        }),\n        response: {\n          204: z.null(),\n        },\n      },\n    },\n    async (request, reply) => {\n      const { code, password } = request.body\n\n      // Verifica se o código de redefinição de senha é válido\n      const tokenFromCode = await prisma.token.findUnique({\n        where: {\n          code,\n        },\n      })\n\n      if (!tokenFromCode || tokenFromCode.code !== code) {\n        throw new UnauthorizedError(\n          'Código de redefinição de senha inválido. Verifique e tente novamente.'\n        )\n      }\n\n      // Busca o funcionário associado ao token\n      const agent = await prisma.agent.findUnique({\n        where: {\n          id: tokenFromCode.agentId,\n        },\n      })\n\n      if (!agent) {\n        throw new UnauthorizedError(\n          'Nenhum funcionário encontrado. Verifique as informações e tente novamente.'\n        )\n      }\n\n      // Verifica se a nova senha é igual à senha atual\n      const isSamePassword = await compare(password, agent.passwordHash)\n\n      if (isSamePassword) {\n        throw new UnauthorizedError(\n          'A nova senha deve ser diferente da atual. Escolha outra senha e tente novamente.'\n        )\n      }\n\n      const passwordHash = await hash(password, 8)\n\n      // Atualiza a senha do agente com o novo hash de senha\n      await prisma.agent.update({\n        where: {\n          id: tokenFromCode.agentId,\n        },\n        data: {\n          passwordHash,\n        },\n      })\n\n      return reply.status(204).send()\n    }\n  )\n}\n","export class UnauthorizedError extends Error {\n  constructor(message?: string) {\n    super(message ?? ' Acesso não autorizado, tente novamente.')\n  }\n}\n","import { PrismaClient } from '@prisma/client'\nimport { env } from 'http/_env'\n\nexport const prisma = new PrismaClient({\n  // Gera logs de queries apenas em ambiente de desenvolvimento\n  log: env.NODE_ENV === 'DEVELOPMENT' ? ['query'] : [],\n})\n","import 'dotenv/config'\nimport { z } from 'zod'\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.coerce.number().default(3892),\n  DATABASE_URL: z.string().url(),\n  PASSWORD_ADMIN_FULL: z.string().min(8),\n  EMAIL_ADMIN_FULL: z.string().email(),\n  JWT_SECRET: z.string().min(8),\n  RESEND_API_KEY: z.string(),\n  WEB_URL: z.string().url(),\n  API_PROTHEUS_DATA_URL: z.string().url(),\n  API_PROTHEUS_FIN_URL: z.string().url(),\n})\n\nconst _env = envSchema.safeParse(process.env)\n\nif (_env.success === false) {\n  console.error(\n    '> ❌ Variáveis de ambiente inválidas, verifique o arquivo .env',\n    _env.error.format()\n  )\n\n  throw new Error('❌ Houve um erro ao carregar as variáveis de ambiente.')\n}\n\nexport const env = _env.data\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA8B;;;ACAvB,IAAM,oBAAN,cAAgC,MAAM;AAAA,EAC3C,YAAY,SAAkB;AAC5B,UAAM,WAAW,6CAA0C;AAAA,EAC7D;AACF;;;ACJA,oBAA6B;;;ACA7B,oBAAO;AACP,iBAAkB;AAElB,IAAM,YAAY,aAAE,OAAO;AAAA,EACzB,UAAU,aAAE,KAAK,CAAC,eAAe,YAAY,CAAC,EAAE,QAAQ,aAAa;AAAA,EACrE,MAAM,aAAE,OAAO,OAAO,EAAE,QAAQ,IAAI;AAAA,EACpC,cAAc,aAAE,OAAO,EAAE,IAAI;AAAA,EAC7B,qBAAqB,aAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EACrC,kBAAkB,aAAE,OAAO,EAAE,MAAM;AAAA,EACnC,YAAY,aAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EAC5B,gBAAgB,aAAE,OAAO;AAAA,EACzB,SAAS,aAAE,OAAO,EAAE,IAAI;AAAA,EACxB,uBAAuB,aAAE,OAAO,EAAE,IAAI;AAAA,EACtC,sBAAsB,aAAE,OAAO,EAAE,IAAI;AACvC,CAAC;AAED,IAAM,OAAO,UAAU,UAAU,QAAQ,GAAG;AAE5C,IAAI,KAAK,YAAY,OAAO;AAC1B,UAAQ;AAAA,IACN;AAAA,IACA,KAAK,MAAM,OAAO;AAAA,EACpB;AAEA,QAAM,IAAI,MAAM,+DAAuD;AACzE;AAEO,IAAM,MAAM,KAAK;;;ADxBjB,IAAM,SAAS,IAAI,2BAAa;AAAA;AAAA,EAErC,KAAK,IAAI,aAAa,gBAAgB,CAAC,OAAO,IAAI,CAAC;AACrD,CAAC;;;AFDD,IAAAA,cAAkB;AAElB,eAAsB,cAAc,KAAsB;AACxD,MAAI,iBAAkC,EAAE;AAAA,IACtC;AAAA,IACA;AAAA,MACE,QAAQ;AAAA,QACN,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS;AAAA,QACT,MAAM,cAAE,OAAO;AAAA,UACb,MAAM,cAAE,OAAO;AAAA,UACf,UAAU,cAAE,OAAO,EAAE,IAAI,CAAC;AAAA,QAC5B,CAAC;AAAA,QACD,UAAU;AAAA,UACR,KAAK,cAAE,KAAK;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAAA,IACA,OAAO,SAAS,UAAU;AACxB,YAAM,EAAE,MAAM,SAAS,IAAI,QAAQ;AAGnC,YAAM,gBAAgB,MAAM,OAAO,MAAM,WAAW;AAAA,QAClD,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,CAAC,iBAAiB,cAAc,SAAS,MAAM;AACjD,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAGA,YAAM,QAAQ,MAAM,OAAO,MAAM,WAAW;AAAA,QAC1C,OAAO;AAAA,UACL,IAAI,cAAc;AAAA,QACpB;AAAA,MACF,CAAC;AAED,UAAI,CAAC,OAAO;AACV,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAGA,YAAM,iBAAiB,UAAM,yBAAQ,UAAU,MAAM,YAAY;AAEjE,UAAI,gBAAgB;AAClB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAM,eAAe,UAAM,sBAAK,UAAU,CAAC;AAG3C,YAAM,OAAO,MAAM,OAAO;AAAA,QACxB,OAAO;AAAA,UACL,IAAI,cAAc;AAAA,QACpB;AAAA,QACA,MAAM;AAAA,UACJ;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO,MAAM,OAAO,GAAG,EAAE,KAAK;AAAA,IAChC;AAAA,EACF;AACF;","names":["import_zod"]}