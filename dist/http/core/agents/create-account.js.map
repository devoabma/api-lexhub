{"version":3,"sources":["../../../../src/http/core/agents/create-account.ts","../../../../src/http/_env/index.ts","../../../../src/http/_errors/bad-request-error.ts","../../../../src/http/middlewares/auth.ts","../../../../src/http/_errors/unauthorized-error.ts","../../../../src/lib/prisma.ts","../../../../src/lib/resend.ts","../../../../src/utils/emails/agent-registration-email.tsx"],"sourcesContent":["import { hash } from 'bcryptjs'\nimport type { FastifyInstance } from 'fastify'\nimport type { ZodTypeProvider } from 'fastify-type-provider-zod'\nimport { env } from 'http/_env'\nimport { BadRequestError } from 'http/_errors/bad-request-error'\nimport { auth } from 'http/middlewares/auth'\nimport { prisma } from 'lib/prisma'\nimport { resend } from 'lib/resend'\nimport { AgentRegistrationEmail } from 'utils/emails/agent-registration-email'\nimport { z } from 'zod'\n\nexport async function createAccountService(app: FastifyInstance) {\n  app\n    .withTypeProvider<ZodTypeProvider>()\n    .register(auth)\n    .post(\n      '/agents',\n      {\n        schema: {\n          tags: ['agents'],\n          summary: 'Cria√ß√£o de um novo funcion√°rio',\n          security: [{ bearerAuth: [] }],\n          body: z.object({\n            name: z.string(),\n            email: z.string().email(),\n            password: z.string().min(8),\n          }),\n          response: {\n            201: z.null(),\n          },\n        },\n      },\n      async (request, reply) => {\n        // Somente admins podem criar um novo funcion√°rio\n        await request.checkIfAgentIsAdmin()\n\n        const { name, email, password } = request.body\n\n        const userWithSameEmail = await prisma.agent.findUnique({\n          where: {\n            email,\n          },\n        })\n\n        if (userWithSameEmail) {\n          throw new BadRequestError(\n            'E-mail j√° cadastrado para outro funcion√°rio.'\n          )\n        }\n\n        const passwordHash = await hash(password, 8)\n\n        // Envia email de boas vindas para o novo funcion√°rio com seus dados\n        await resend.emails.send({\n          from: 'üìß OAB Atende <oabatende@oabma.com.br>',\n          to: email,\n          subject: 'üéâ Bem-vindo √† equipe! Aqui est√£o suas informa√ß√µes.',\n          react: AgentRegistrationEmail({\n            name,\n            email,\n            tempPassword: password,\n            link: env.WEB_URL,\n          }),\n        })\n\n        try {\n          await prisma.agent.create({\n            data: {\n              name,\n              email,\n              passwordHash,\n            },\n          })\n\n          return reply.status(201).send()\n        } catch (err) {\n          throw new BadRequestError(\n            'Erro ao criar funcion√°rio. Por favor, tente novamente.'\n          )\n        }\n      }\n    )\n}\n","import 'dotenv/config'\nimport { z } from 'zod'\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production']).default('development'),\n  PORT: z.coerce.number().default(3892),\n  DATABASE_URL: z.string().url(),\n  PASSWORD_ADMIN_FULL: z.string().min(8),\n  EMAIL_ADMIN_FULL: z.string().email(),\n  JWT_SECRET: z.string().min(8),\n  RESEND_API_KEY: z.string(),\n  WEB_URL: z.string().url(),\n  API_PROTHEUS_DATA_URL: z.string().url(),\n  API_PROTHEUS_FIN_URL: z.string().url(),\n})\n\nconst _env = envSchema.safeParse(process.env)\n\nif (_env.success === false) {\n  console.error(\n    '> ‚ùå Vari√°veis de ambiente inv√°lidas, verifique o arquivo .env',\n    _env.error.format()\n  )\n\n  throw new Error('‚ùå Houve um erro ao carregar as vari√°veis de ambiente.')\n}\n\nexport const env = _env.data\n","export class BadRequestError extends Error {}\n","import type { FastifyInstance } from 'fastify'\nimport { fastifyPlugin } from 'fastify-plugin'\nimport { UnauthorizedError } from 'http/_errors/unauthorized-error'\nimport { prisma } from 'lib/prisma'\n\nexport const auth = fastifyPlugin(async (app: FastifyInstance) => {\n  app.addHook('preHandler', async request => {\n    request.getCurrentAgentId = async () => {\n      try {\n        // Verifica se o token √© valido e retorna o sub\n        const { sub } = await request.jwtVerify<{ sub: string }>()\n\n        return sub\n      } catch {\n        throw new UnauthorizedError(\n          'Token inv√°lido ou expirado. Fa√ßa login novamente.'\n        )\n      }\n    }\n\n    request.checkIfAgentIsAdmin = async () => {\n      // Verifica o token primeiro\n      const { sub } = await request.jwtVerify<{ sub: string }>().catch(() => {\n        throw new UnauthorizedError(\n          'Token inv√°lido ou expirado. Verifique as informa√ß√µes e tente novamente.'\n        )\n      })\n\n      // Busca o agente no banco de dados\n      const agent = await prisma.agent.findUnique({\n        where: { id: sub },\n        select: { role: true },\n      })\n\n      if (!agent) {\n        throw new UnauthorizedError(\n          'Funcion√°rio n√£o encontrado. Verifique os dados e tente novamente.'\n        )\n      }\n\n      if (agent.role === 'MEMBER') {\n        throw new UnauthorizedError(\n          'Permiss√£o negada. Voc√™ precisa ser um administrador para realizar esta a√ß√£o.'\n        )\n      }\n    }\n  })\n})\n","export class UnauthorizedError extends Error {\n  constructor(message?: string) {\n    super(message ?? ' Acesso n√£o autorizado, tente novamente.')\n  }\n}\n","import { PrismaClient } from '@prisma/client'\nimport { env } from 'http/_env'\n\nexport const prisma = new PrismaClient({\n  // Gera logs de queries apenas em ambiente de desenvolvimento\n  log: env.NODE_ENV === 'DEVELOPMENT' ? ['query'] : [],\n})\n","import { env } from 'http/_env'\nimport { Resend } from 'resend'\n\nexport const resend = new Resend(env.RESEND_API_KEY)\n","import {\n  Body,\n  Button,\n  Container,\n  Head,\n  Heading,\n  Hr,\n  Html,\n  Preview,\n  Section,\n  Tailwind,\n  Text,\n} from '@react-email/components'\nimport * as React from 'react'\n\ninterface PasswordResetEmailProps {\n  name: string\n  email: string\n  tempPassword: string\n  link: string\n}\n\n// @ts-ignore somente para o react-email\nReact.version\n\nexport const AgentRegistrationEmail = ({\n  name,\n  email,\n  tempPassword,\n  link,\n}: PasswordResetEmailProps) => {\n  const currentYear = new Date().getFullYear()\n  const sendDate = new Date().toLocaleDateString('pt-BR')\n\n  return (\n    <Html>\n      <Head />\n      <Preview>\n        Bem-vindo(a) √† OAB Atende! Confira os detalhes do seu cadastro.\n      </Preview>\n\n      <Tailwind>\n        <Body className=\"bg-gray-100 font-sans\">\n          <Container className=\"bg-white border border-gray-200 rounded-lg p-8 mx-auto my-8 max-w-xl\">\n            <Heading className=\"text-2xl font-bold text-center text-blue-700 mb-6\">\n              Bem-vindo(a) √† OAB Atende!\n            </Heading>\n            <Text className=\"text-gray-700 mb-6\">\n              Ol√°, <b>{name}</b>\n            </Text>\n            <Text className=\"text-gray-700 mb-6\">\n              Estamos muito felizes em t√™-lo(a) conosco! Abaixo est√£o os\n              detalhes do seu cadastro:\n            </Text>\n            <Section className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n              <Text className=\"text-gray-700 mb-2\">\n                <b>Nome:</b> {name}\n              </Text>\n              <Text className=\"text-gray-700 mb-2\">\n                <b>E-mail:</b> {email}\n              </Text>\n              <Text className=\"text-gray-700\">\n                <b>Senha provis√≥ria:</b> {tempPassword}\n              </Text>\n            </Section>\n            <Text className=\"text-gray-700 mb-6\">\n              Voc√™ est√° recebendo uma senha tempor√°ria para acessar o sistema da\n              OAB Atende. Por quest√µes de seguran√ßa, √© obrigat√≥rio que voc√™\n              realize a redefini√ß√£o de senha.\n            </Text>\n            <Button\n              href={link}\n              className=\"bg-blue-600 text-white font-bold py-3 px-6 rounded-lg text-center block\"\n            >\n              Acessar o Sistema\n            </Button>\n            <Hr className=\"border-gray-200 my-6\" />\n            <Text className=\"text-sm text-gray-500 text-center\">\n              Este √© um e-mail autom√°tico. Por favor, n√£o responda a esta\n              mensagem.\n            </Text>\n            <Hr className=\"border-gray-200 my-6\" />\n            <Text className=\"text-xs text-gray-400 text-center\">\n              &copy; {currentYear} OAB Atende. Todos os direitos reservados.\n            </Text>\n            <Text className=\"text-xs text-gray-400 text-center\">\n              Este e-mail foi enviado em {sendDate}.\n            </Text>\n          </Container>\n        </Body>\n      </Tailwind>\n    </Html>\n  )\n}\n"],"mappings":"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","names":["import_zod"]}