generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model Agent {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         Role      @default(MEMBER)
  inactive     DateTime?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  tokens   Token[]
  services Services[]

  @@map("agents")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  code      String    @unique @db.VarChar(6)
  createdAt DateTime  @default(now()) @map("created_at")

  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String @map("agent_id")

  @@map("tokens")
}

model Lawyer {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  oab       String   @unique
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  services Services[]

  @@map("lawyers")
}

enum ServiceStatus {
  OPEN
  COMPLETED
}

enum AssistanceTypes {
  PERSONALLY
  REMOTE
}

model Services {
  id          String          @id @default(uuid())
  assistance  AssistanceTypes
  observation String?
  status      ServiceStatus
  createdAt   DateTime        @default(now()) @map("created_at")
  finishedAt  DateTime?       @map("finished_at")

  agent    Agent  @relation(fields: [agentId], references: [id])
  agentId  String @map("agent_id")
  lawyer   Lawyer @relation(fields: [lawyerId], references: [id])
  lawyerId String @map("lawyer_id")

  serviceTypes ServiceServiceTypes[]

  @@index([lawyerId])
  @@index([agentId])
  @@index([status])
  @@map("services")
}

model ServiceTypes {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  services ServiceServiceTypes[]

  @@map("service_types")
}

model ServiceServiceTypes {
  service   Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String   @map("service_id")

  serviceType   ServiceTypes @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
  serviceTypeId String       @map("service_type_id")

  @@id([serviceId, serviceTypeId]) // Chave prim√°ria composta
  @@map("service_service_types")
}
